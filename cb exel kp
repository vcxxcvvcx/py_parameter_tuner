import math
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from tqdm import tqdm

# tqdm 설정
tqdm.pandas()

# 데이터 로드
data = pd.read_csv(r'C:\Users\user\Desktop\오늘파일\엠티\cbkp.txt', delimiter='\t',
                   header=None, names=['Date', 'Open', 'High', 'Low', 'Close'])

# OC 및 NOC 계산
data['OC'] = np.abs(data['Open'] - data['Close'])
data['NOC'] = (data['High'] - data['Low']) - data['OC']
data['OC_NOC'] = np.maximum(data['OC'], data['NOC'])

# 변동성 조합 계산
data['HC_LC'] = np.maximum(data['High'] - data['Close'], data['Close'] - data['Low'])
data['OH_OL'] = np.maximum(data['High'] - data['Open'], data['Open'] - data['Low'])
data['HC_LC_OH_OL'] = np.maximum(data['HC_LC'], data['OH_OL'])
data['HC_LC_OC_NOC'] = np.maximum(data['HC_LC'], data['OC_NOC'])
data['OH_OL_OC_NOC'] = np.maximum(data['OH_OL'], data['OC_NOC'])
data['HC_LC_OH_OL_OC_NOC'] = np.maximum.reduce([data['HC_LC'], data['OH_OL'], data['OC_NOC']])
data['High_Low'] = data['High'] - data['Low']
data['Close_Pct'] = data['Close'] * 0.01

Buycoef = 0.672
Sellcoef = 0.357

def calculate_metrics(profits):
    profits = np.array(profits)
    equity_curve = np.cumsum(profits)
    drawdown = equity_curve - np.maximum.accumulate(equity_curve)
    mdd = np.min(drawdown)
    trades = np.sum(profits != 0)
    wins = np.sum(profits > 0)
    win_rate = wins / trades if trades > 0 else 0
    return mdd, win_rate, trades

def find_best_filter_min_by_trend(data, Buycoef, Sellcoef, trend='up'):
    best_profit = -np.inf
    best_filter = None
    for filter_min in tqdm(np.arange(0.0015, 0.0060, 0.0001), desc=f"searching best filter_min ({trend})"):
        buy_p, sell_p, _, _ = calculate_profits_by_trend(data, Buycoef, Sellcoef,
                                                         filter_min if trend=='up' else 0.003,
                                                         filter_min if trend=='down' else 0.005,
                                                         0.2, 0.2)
        total_profit = np.sum(np.add(buy_p, sell_p))
        if total_profit > best_profit:
            best_profit = total_profit
            best_filter = filter_min
    return best_filter, best_profit

def find_best_filter_max_by_trend(data, Buycoef, Sellcoef, trend='up'):
    best_profit = -np.inf
    best_filter = None
    for filter_max in tqdm(np.arange(0.02, 0.2, 0.0005), desc=f"searching best filter_max ({trend})"):
        buy_p, sell_p, _, _ = calculate_profits_by_trend(data, Buycoef, Sellcoef,
                                                         0.003, 0.005,
                                                         filter_max if trend=='up' else 0.2,
                                                         filter_max if trend=='down' else 0.2)
        total_profit = np.sum(np.add(buy_p, sell_p))
        if total_profit > best_profit:
            best_profit = total_profit
            best_filter = filter_max
    return best_filter, best_profit

def calculate_profits_by_trend(data, Buycoef, Sellcoef,
                                filter_min_up, filter_min_down,
                                filter_max_up, filter_max_down):
    buy_profits = []
    sell_profits = []
    trades = []
    total_profits = []
    cum_profit = 0

    for i in range(1, len(data)):
        prev_close = data['Close'].iloc[i-1]
        today_open = data['Open'].iloc[i]
        vol = data['HC_LC_OH_OL'].iloc[i-1] / prev_close
        trade = ''
        profit = 0

        if today_open > prev_close and filter_min_up < vol < filter_max_up:
            buy_price = today_open + math.ceil((data['HC_LC_OH_OL'].iloc[i-1] * Buycoef) * 20) * 0.05
            if data['High'].iloc[i] >= round(buy_price, 3):
                profit = data['Close'].iloc[i] - buy_price
                trade = 'Buy'
            buy_profits.append(profit if trade == 'Buy' else 0)
            sell_profits.append(0)

        elif today_open < prev_close and filter_min_down < vol < filter_max_down:
            sell_price = today_open - math.ceil((data['HC_LC_OH_OL'].iloc[i-1] * Sellcoef) * 20) * 0.05
            if data['Low'].iloc[i] <= round(sell_price, 3):
                profit = sell_price - data['Close'].iloc[i]
                trade = 'Sell'
            sell_profits.append(profit if trade == 'Sell' else 0)
            buy_profits.append(0)

        else:
            buy_profits.append(0)
            sell_profits.append(0)

        cum_profit += profit
        trades.append(trade)
        total_profits.append((profit, cum_profit))

    return buy_profits, sell_profits, trades, total_profits

# 최적 필터 찾기
filter_min_up, _ = find_best_filter_min_by_trend(data, Buycoef, Sellcoef, 'up')
filter_min_down, _ = find_best_filter_min_by_trend(data, Buycoef, Sellcoef, 'down')
filter_max_up, _ = find_best_filter_max_by_trend(data, Buycoef, Sellcoef, 'up')
filter_max_down, _ = find_best_filter_max_by_trend(data, Buycoef, Sellcoef, 'down')

# 수익 및 거래 계산
buy_p, sell_p, trades, total_profits = calculate_profits_by_trend(data, Buycoef, Sellcoef,
                                                                   filter_min_up, filter_min_down,
                                                                   filter_max_up, filter_max_down)
total_profit = np.add(buy_p, sell_p)
cumulative_total = np.cumsum(total_profit)

# 성과 지표
mdd_buy, win_buy, trades_buy = calculate_metrics(buy_p)
mdd_sell, win_sell, trades_sell = calculate_metrics(sell_p)
mdd_total, win_total, trades_total = calculate_metrics(total_profit)

# 출력
print(f"\nBest filter_min_up: {round(filter_min_up, 5)}")
print(f"Best filter_min_down: {round(filter_min_down, 5)}")
print(f"Best filter_max_up: {round(filter_max_up, 5)}")
print(f"Best filter_max_down: {round(filter_max_down, 5)}")
print(f"Cumulative Buy Profit: {round(np.sum(buy_p), 3)}")
print(f"Cumulative Sell Profit: {round(np.sum(sell_p), 3)}")
print(f"Total Profit: {round(cumulative_total[-1], 3)}")

print("\n[성과 지표]")
print(f"Buy  - MDD: {round(mdd_buy, 2)}, Win Rate: {round(win_buy * 100, 2)}%, Trades: {trades_buy}")
print(f"Sell - MDD: {round(mdd_sell, 2)}, Win Rate: {round(win_sell * 100, 2)}%, Trades: {trades_sell}")
print(f"Total- MDD: {round(mdd_total, 2)}, Win Rate: {round(win_total * 100, 2)}%, Trades: {trades_total}")

# 엑셀 저장
excel_df = data.copy()
excel_df = excel_df.iloc[1:].reset_index(drop=True)
excel_df['Trade'] = trades
excel_df['Profit'] = [p[0] for p in total_profits]
excel_df['Cumulative'] = [p[1] for p in total_profits]
excel_df.to_excel('trade_results.xlsx', index=False)

# 시각화
plt.figure(figsize=(12, 6))
plt.plot(np.cumsum(buy_p), label='Cumulative Buy Profit')
plt.plot(np.cumsum(sell_p), label='Cumulative Sell Profit')
plt.plot(cumulative_total, label='Total Profit')
plt.xlabel('Index')
plt.ylabel('Profit')
plt.title('Equity Curve (Trend-Based Filter - Optimized)')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()
